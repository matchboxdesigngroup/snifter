// ===============================================
// Mixins
// ===============================================
// Border radius.
//
// @param $radius Radius size.
@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;
}

// No border radius.
@mixin border-radius-none {
	border-radius: 0;
	-webkit-appearance: none;
	-moz-appearance: none;
}

// No Shadow
@mixin box-shadow-none {
	@include box-shadow(0 0 0 rgba(0, 0, 0, 0) !important);
}

// Arrow up.
//
// @param $color  Arrow color.
// @param $left   Arrow left width.
// @param $right  Arrow right width.
// @param $height Arrow height.
//
// .arrow-down { @include arrow-down(#000, 15px, 15px, 25px) }
@mixin arrow-up($color, $left:5px, $right:5px, $height:5px, $transition:true) {
	width: 0;
	height: 0;
	border-left: $left solid transparent;
	border-right: $right solid transparent;
	border-bottom: $height solid $color;

	@if $transition {
		@include transition(color 0.15s ease-out , background-color 0.15s ease-out , border 0.15s ease-out);
	}
}


// Arrow down.
//
// @param $color  Arrow color.
// @param $left   Arrow left width.
// @param $right  Arrow right width.
// @param $height Arrow height.
//
// .arrow-down { @include arrow-down(#000, 5px, 45px, 75px) }
@mixin arrow-down($color, $left:5px, $right:5px, $height:5px, $transition:true) {
	width: 0;
	height: 0;
	border-left: $left solid transparent;
	border-right: $right solid transparent;
	border-top: $height solid $color;

	@if $transition {
		@include transition(color 0.15s ease-out , background-color 0.15s ease-out , border 0.15s ease-out);
	}
}

// Arrow right.
//
// @param $color Arrow color.
// @param $left   Arrow left width.
// @param $height Arrow height.
// @param $right  Arrow right width.
//
// .arrow-right { @include arrow-right(#000, 5px, 45px, 75px) }
@mixin arrow-right($color, $left:5px, $height:5px, $right:5px, $transition:true) {
	width: 0;
	height: 0;
	border-top: $left solid transparent;
	border-bottom: $height solid transparent;
	border-left: $right solid $color;

	@if $transition {
		@include transition(color 0.15s ease-out , background-color 0.15s ease-out , border 0.15s ease-out);
	}
}

// Arrow Left.
//
// @param $color Arrow color.
// @param $right  Arrow right width.
// @param $height Arrow height.
// @param $left   Arrow left width.
//
// .arrow-left { @include arrow-left(#000, 5px, 45px, 75px) }
@mixin arrow-left($color, $right:5px, $height:5px, $left:5px, $transition:true) {
	width: 0;
	height: 0;
	border-top: $right solid transparent;
	border-bottom: $height solid transparent;
	border-right: $left solid $color;

	@if $transition {
		@include transition(color 0.15s ease-out , background-color 0.15s ease-out , border 0.15s ease-out);
	}
}



//Background opacity
//
// @param $color   The color to set opacity on.
// @param $opacity The opacity value 0 to 1.
@mixin background-opacity($color, $opacity) {
	background: $color;
	background: rgba($color, $opacity);
}


// ===============================================
// Media Queries
// ===============================================

// Media Query Min Width.
// @param $screen-size Min device width.
// @param $ie          Should this media query output to the IE StyleSheet
@mixin bp-min($screen-size, $ie:false) {
	@if $ie and $old-ie {
		@content;
	} @else {
		@media (min-width: $screen-size) { @content; }
	}
}

// Media Query Max Width.
// @param $screen-size Max device width.
// @param $ie          Should this media query output to the IE StyleSheet
@mixin bp-max($screen-size, $ie:false) {
	@if $ie and $old-ie {
		@content;
	} @else {
		@media (max-width: $screen-size) { @content; }
	}
}

// Media Query Min/Max
// @param $min Min device width.
// @param $max Max device width.
// @param $ie  Should this media query output to the IE StyleSheet
@mixin bp-min-max($min, $max, $ie:false) {
	@if $ie and $old-ie {
		@content;
	} @else {
		@media (min-width: $min) and (max-width: $max) { @content; }
	}
}

// ===============================================
// Media Sizes
// $screen-xs: 480px;
// $screen-sm: 768px;
// $screen-md: 992px;
// $screen-lg: 1200px;
// ===============================================

// Extra small devices (phones, less than 768px)
@mixin bp-screen-xxs() {
	@if $old-ie {
	} @else {
		@include bp-max($screen-xs) { @content; }
	} // @if/@else()
} // bp-screen-xxs()

// Small devices (tablets, 768px and down)
@mixin bp-screen-xs() {
	@if $old-ie {
	} @else {
		@include bp-max($screen-sm-min) { @content; }
	} // @if/@else()
} // bp-screen-xs()

// Small devices (tablets, 768px and up)
@mixin bp-screen-sm() {
	@if $old-ie {
		@content;
	} @else {
		@include bp-min($screen-sm-min) { @content; }
	} // @if/@else()
} // bp-screen-sm()

// Medium devices (desktops, 992px and up)
@mixin bp-screen-md() {
	@if $old-ie {
	} @else {
		@include bp-min($screen-md-min) { @content; }
	} // @if/@else()
} // bp-screen-md()

// Large devices (large desktops, 1200px and up)
@mixin bp-screen-lg() {
	@if $old-ie {
	} @else {
		@include bp-min($screen-lg-min) { @content; }
	} // @if/@else()
} // bp-screen-lg()

// ===============================================
// Media Quearies to limit CSS to a narrower set of devices.
// ===============================================
// Used to target small devices only
@mixin bp-min-max-sm() {
	@if $old-ie {
	} @else {
		@include bp-min-max($screen-sm-min, $screen-sm-max) { @content; }
	} // @if/@else()
} // bp-min-max-sm()

// Used to target medium devices only
@mixin bp-min-max-md() {
	@if $old-ie {
	} @else {
		@include bp-min-max($screen-md-min, $screen-md-max) { @content; }
	} // @if/@else()
} // bp-min-max-md()